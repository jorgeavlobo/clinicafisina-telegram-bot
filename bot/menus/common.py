# bot/menus/common.py
"""
Utilit√°rios partilhados por todos os menus inline.

‚Ä¢ back_button()  ‚Äì devolve um InlineKeyboardButton ‚ÄúVoltar‚Äù.
‚Ä¢ start_menu_timeout() ‚Äì agenda a elimina√ß√£o autom√°tica do menu
  se n√£o houver intera√ß√£o em ‚Äπmenu_timeout‚Ä∫ segundos.
‚Ä¢ Ap√≥s apagar o menu, a mensagem de aviso √© tamb√©m apagada
  automaticamente ap√≥s ‚Äπmessage_timeout‚Ä∫ segundos.
"""

import asyncio
from typing import Callable, Awaitable

from aiogram import Bot, exceptions
from aiogram.types import InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext

from bot.config import MENU_TIMEOUT, MESSAGE_TIMEOUT

__all__ = ["back_button", "start_menu_timeout"]

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Bot√£o ‚ÄúVoltar‚Äù ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def back_button() -> InlineKeyboardButton:
    """üîô Bot√£o gen√©rico de retorno com callback-data ¬´back¬ª."""
    return InlineKeyboardButton(text="üîô Voltar", callback_data="back")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Timeout autom√°tico do menu ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def _delete_menu_after_delay(
    bot: Bot,
    chat_id: int,
    msg_id: int,
    state: FSMContext,
    menu_timeout: int,
    message_timeout: int,
) -> None:
    """Tarefa interna: aguarda ‚Äπmenu_timeout‚Ä∫ s e elimina o menu se ainda existir."""
    await asyncio.sleep(menu_timeout)

    data = await state.get_data()
    if data.get("menu_msg_id") != msg_id:
        return

    try:
        await bot.delete_message(chat_id, msg_id)
    except exceptions.TelegramBadRequest:
        pass

    try:
        inactivity_msg = await bot.send_message(
            chat_id,
            f"‚åõ O menu ficou inactivo durante {menu_timeout} s e foi fechado.\n"
            "Se precisar, utilize /start ou o bot√£o ‚ÄúMenu‚Äù para reabri-lo.",
        )
    except exceptions.TelegramBadRequest:
        return

    await state.update_data(menu_msg_id=None, menu_chat_id=None)

    asyncio.create_task(_delete_inactivity_message(bot, chat_id, inactivity_msg.message_id, message_timeout))


async def _delete_inactivity_message(
    bot: Bot,
    chat_id: int,
    msg_id: int,
    delay: int,
) -> None:
    """Apaga a mensagem de aviso de inatividade ap√≥s ‚Äπdelay‚Ä∫ segundos."""
    await asyncio.sleep(delay)
    try:
        await bot.delete_message(chat_id, msg_id)
    except exceptions.TelegramBadRequest:
        pass

def start_menu_timeout(
    bot: Bot,
    message: Message,
    state: FSMContext,
    menu_timeout: int = MENU_TIMEOUT,
    message_timeout: int = MESSAGE_TIMEOUT,
) -> None:
    """
    Agenda a remo√ß√£o autom√°tica da mensagem-menu ap√≥s ‚Äπmenu_timeout‚Ä∫ segundos,
    e a remo√ß√£o da mensagem de aviso ap√≥s ‚Äπmessage_timeout‚Ä∫ segundos.

    Deve ser chamada IMEDIATAMENTE depois de enviar o menu e
    guardar em FSM:
        await state.update_data(menu_msg_id=msg.message_id, ...)
        common.start_menu_timeout(bot, msg, state)
    """
    asyncio.create_task(
        _delete_menu_after_delay(
            bot=bot,
            chat_id=message.chat.id,
            msg_id=message.message_id,
            state=state,
            menu_timeout=menu_timeout,
            message_timeout=message_timeout,
        )
    )
